#===============================================================================
# Menu_Skill
# Edited    May 1 2020
#===============================================================================
#███████╗██╗  ██╗██╗██╗     ██╗          █████╗  ██████╗████████╗ ██████╗ ██████╗
#██╔════╝██║ ██╔╝██║██║     ██║         ██╔══██╗██╔════╝╚══██╔══╝██╔═══██╗██╔══██╗
#███████╗█████╔╝ ██║██║     ██║         ███████║██║        ██║   ██║   ██║██████╔╝
#╚════██║██╔═██╗ ██║██║     ██║         ██╔══██║██║        ██║   ██║   ██║██╔══██╗
#███████║██║  ██╗██║███████╗███████╗    ██║  ██║╚██████╗   ██║   ╚██████╔╝██║  ██║
#╚══════╝╚═╝  ╚═╝╚═╝╚══════╝╚══════╝    ╚═╝  ╚═╝ ╚═════╝   ╚═╝    ╚═════╝ ╚═╝  ╚═╝
class Window_SkillActor < Window_Selectable

  #--------------------------------------------------------------------------
  # * Public Instance Variables
  #--------------------------------------------------------------------------
  attr_reader   :item_window
  #--------------------------------------------------------------------------
  # * Includes module ActorRibbon
  #--------------------------------------------------------------------------
  include ActorRibbon
  #--------------------------------------------------------------------------
  # * Object Initialization
  #--------------------------------------------------------------------------
  def initialize
    super(:left)
  end
  #--------------------------------------------------------------------------
  # * Frame Update
  #--------------------------------------------------------------------------
  def update
    super
    @item_window.actor = @data[index] if @item_window
    update_itemwindow_position unless !@item_window
  end
  #--------------------------------------------------------------------------
  # * Set Item Window
  #--------------------------------------------------------------------------
  def item_window=(item_window)
    @item_window = item_window
    update
  end
  #--------------------------------------------------------------------------
  # * update_itemwindow_position
  #--------------------------------------------------------------------------
  def update_itemwindow_position
    return if !@item_window
    window = @item_window
    window.height = [[fitting_height(window.item_max), fitting_height(4)].max, Graphics.height].min
    wy = (self.y + (96 * index))
    ay = (wy + window.height) > Graphics.height ? -((wy + window.height) - Graphics.height) : 0
    window.y = wy < 0 ? 0 : wy + ay
    window.arrows_visible = window.height == Graphics.height ? true : false
  end

end #Window_SkillActor

#███████╗██╗  ██╗██╗██╗     ██╗         ██╗     ██╗███████╗████████╗
#██╔════╝██║ ██╔╝██║██║     ██║         ██║     ██║██╔════╝╚══██╔══╝
#███████╗█████╔╝ ██║██║     ██║         ██║     ██║███████╗   ██║
#╚════██║██╔═██╗ ██║██║     ██║         ██║     ██║╚════██║   ██║
#███████║██║  ██╗██║███████╗███████╗    ███████╗██║███████║   ██║
#╚══════╝╚═╝  ╚═╝╚═╝╚══════╝╚══════╝    ╚══════╝╚═╝╚══════╝   ╚═╝
class Window_SkillList < Window_Selectable

  #--------------------------------------------------------------------------
  # * Public Instance Variables
  #--------------------------------------------------------------------------
  attr_reader   :actor
  #--------------------------------------------------------------------------
  # * Object Initialization
  #--------------------------------------------------------------------------
  def initialize
    super(120,0,264,300)
    @info_window = Window_ItemInfo.new
    @actor = nil
    @data = []
    SceneManager.scene.instance_variable_set(:@itemlistinfo_window, @info_window)
  end
  #--------------------------------------------------------------------------
  # * Set Actor
  #--------------------------------------------------------------------------
  def actor=(actor)
    return if @actor == actor
    @actor = actor
    refresh
  end
  #--------------------------------------------------------------------------
  # * Get Digit Count
  #--------------------------------------------------------------------------
  def col_max
    return 1
  end
  #--------------------------------------------------------------------------
  # * Frame Update
  #--------------------------------------------------------------------------
  def update
    super
    @info_window.update_item(item) if @info_window
  end
  #--------------------------------------------------------------------------
  # * Get Number of Items
  #--------------------------------------------------------------------------
  def item_max
    @data ? @data.size : 1
  end
  #--------------------------------------------------------------------------
  # * Get Skill
  #--------------------------------------------------------------------------
  def item
    @data && index >= 0 ? @data[index] : nil
  end
  #--------------------------------------------------------------------------
  # * Get Activation State of Selection Item
  #--------------------------------------------------------------------------
  def current_item_enabled?
    enable?(@data[index])
  end
  #--------------------------------------------------------------------------
  # * Include in Skill List?
  #--------------------------------------------------------------------------
  def include?(item)
    item
  end
  #--------------------------------------------------------------------------
  # * Display Skill in Active State?
  #--------------------------------------------------------------------------
  def enable?(item)
    @actor && @actor.usable?(item)
  end
  #--------------------------------------------------------------------------
  # * Create Skill List
  #--------------------------------------------------------------------------
  def make_item_list
    @data = @actor ? @actor.skills : []
  end
  #--------------------------------------------------------------------------
  # * Draw Item
  #--------------------------------------------------------------------------
  def draw_item(index)
    skill = @data[index]
    if skill
      rect = item_rect(index)
      rect.width -= 4
      draw_item_name(skill, rect.x, rect.y, enable?(skill))
    end
  end
  #--------------------------------------------------------------------------
  # * Refresh
  #--------------------------------------------------------------------------
  def refresh
    make_item_list
    create_contents
    draw_all_items
  end
  #--------------------------------------------------------------------------
  # * Show Window
  #--------------------------------------------------------------------------
  def show
    @info_window.show if @info_window
    super
  end
  #--------------------------------------------------------------------------
  # * Hide Window
  #--------------------------------------------------------------------------
  def hide
    @info_window.hide if @info_window
    super
  end
  #--------------------------------------------------------------------------
  # * Dispose
  #--------------------------------------------------------------------------
  alias mscr_skillmenu_skillslist_dispose dispose
  def dispose
    mscr_skillmenu_skillslist_dispose
    @info_window.dispose if @info_window
  end

end #Window_SkillList

#███████╗ ██████╗███████╗███╗   ██╗███████╗    ███████╗██╗  ██╗██╗██╗     ██╗
#██╔════╝██╔════╝██╔════╝████╗  ██║██╔════╝    ██╔════╝██║ ██╔╝██║██║     ██║
#███████╗██║     █████╗  ██╔██╗ ██║█████╗      ███████╗█████╔╝ ██║██║     ██║
#╚════██║██║     ██╔══╝  ██║╚██╗██║██╔══╝      ╚════██║██╔═██╗ ██║██║     ██║
#███████║╚██████╗███████╗██║ ╚████║███████╗    ███████║██║  ██╗██║███████╗███████╗
#╚══════╝ ╚═════╝╚══════╝╚═╝  ╚═══╝╚══════╝    ╚══════╝╚═╝  ╚═╝╚═╝╚══════╝╚══════╝
class Scene_Skill < Scene_ItemBase

  #--------------------------------------------------------------------------
  # start
  #--------------------------------------------------------------------------
  def start
    super
    create_skilllist_window
    create_actorlist_window
  end
  #--------------------------------------------------------------------------
  # create_skilllist_window
  #--------------------------------------------------------------------------
  def create_skilllist_window
    @item_window = Window_SkillList.new
    @item_window.set_handler(:ok,     method(:on_item_ok))
    @item_window.set_handler(:cancel, method(:on_item_cancel))
  end
  #--------------------------------------------------------------------------
  # create_actor_window
  #--------------------------------------------------------------------------
  def create_actorlist_window
    @actorlist_window = Window_SkillActor.new
    @actorlist_window.item_window = @item_window
    @actorlist_window.set_handler(:ok,     method(:on_actor_ok))
    @actorlist_window.set_handler(:cancel, method(:return_scene))
  end
  #--------------------------------------------------------------------------
  # * Actor [OK]
  #--------------------------------------------------------------------------
  def on_actor_ok
    @item_window.activate
    @item_window.select(0)
  end
  #--------------------------------------------------------------------------
  # * Item [OK]
  #--------------------------------------------------------------------------
  def on_item_ok
    @item_window.actor.last_skill.object = item
    determine_item
  end
  #--------------------------------------------------------------------------
  # * Item [Cancel]
  #--------------------------------------------------------------------------
  def on_item_cancel
    @item_window.unselect
    @actorlist_window.activate
  end
  #--------------------------------------------------------------------------
  # * Get Currently Selected Item
  #--------------------------------------------------------------------------
  def item
    @item_window.item
  end
  #--------------------------------------------------------------------------
  # * Use Item
  #--------------------------------------------------------------------------
  def use_item
    super
    @actorlist_window.refresh
    @item_window.refresh
  end

end #Scene_Skill
